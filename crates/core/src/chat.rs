use std::error::Error;

use llm_client::interface::requests::completion::ToolDefinition;

/// A trait representing a prompt-based interaction mechanism.
/// This trait defines the behavior of components that process user prompts
/// and return responses asynchronously.
///
/// # Associated Types
/// - `PromptError`: Represents errors that may occur during prompt processing.
///
/// # Requirements
/// Implementors of this trait must ensure thread safety (`Send` and `Sync`)
/// and provide an asynchronous implementation for the `prompt` method.
pub trait Prompt: Send + Sync {
    /// The error type associated with the `prompt` operation.
    type PromptError: Error + Send + Sync;

    /// Processes the given prompt and returns a response asynchronously.
    ///
    /// # Arguments
    /// - `prompt`: The input string provided by the user.
    ///
    /// # Returns
    /// A future that resolves to either:
    /// - `Ok(String)`: The generated response as a string.
    /// - `Err(Self::PromptError)`: An error that occurred during prompt processing.
    fn prompt(
        &self,
        prompt: &str,
    ) -> impl std::future::Future<Output = Result<String, Self::PromptError>> + Send;
}

/// Represents a request sent to a language model for generating a completion response.
///
/// A `Request` encapsulates the user prompt and additional configuration options,
/// such as a system-defined preamble, token limit, and randomness control. It
/// can also include a list of tools available to the model for enhanced functionality.
#[derive(Debug, Clone)]
pub struct Request {
    /// The user-provided prompt that the language model must complete.
    pub prompt: String,
    /// A system-defined preamble, used to guide the behavior and tone of the model.
    pub preamble: String,
    /// Optional: The maximum number of tokens allowed for the generated response.
    pub max_tokens: Option<usize>,
    /// Optional: The temperature for text generation, controlling the randomness of the output.
    pub temperature: Option<f32>,
    /// A collection of tools provided to the model for tool-based interactions.
    pub tools: Vec<ToolDefinition>,
}

impl Request {
    /// Constructs a new `Request` with the given prompt and preamble.
    ///
    /// By default, `max_tokens` and `temperature` are left unset. The tools list
    /// is initialized as an empty vector.
    ///
    /// # Arguments
    /// - `prompt`: A string representing the user's input prompt.
    /// - `preamble`: A string that defines the system preamble to guide the model.
    ///
    /// # Returns
    /// A new instance of the `Request` struct.
    pub fn new(prompt: String, preamble: String) -> Self {
        Self {
            prompt,
            preamble,
            max_tokens: None,
            temperature: None,
            tools: Vec::new(),
        }
    }
}

/// A trait for extracting the content from a language model's response.
///
/// Implementing this trait allows access to the main text content of a response.
pub trait ResponseContent {
    /// Retrieves the main content from the response.
    ///
    /// # Returns
    /// A string containing the text content of the response.
    fn content(&self) -> String;
}

/// A trait for extracting tool-based calls from a language model's response.
///
/// Implementing this trait allows access to tool-related interactions defined
/// in the response.
pub trait ResponseToolCalls {
    /// Extracts tool calls from the response.
    ///
    /// # Returns
    /// A vector of `ToolCall` objects representing tool-related interactions.
    fn toolcalls(&self) -> Vec<ToolCall>;
}

/// Represents a call to a specific tool in a response.
///
/// A `ToolCall` includes the tool's ID, type, and the associated function with its arguments.
pub struct ToolCall {
    /// The unique identifier for the tool call.
    pub id: String,
    /// The type of the tool call.
    pub r#type: String,
    /// The function being called, along with its name and arguments.
    pub function: CallFunction,
}

/// Represents a callable function within a tool interaction.
///
/// This includes the function's name and its arguments as a string.
pub struct CallFunction {
    /// The name of the function being invoked.
    pub name: String,
    /// The arguments provided to the function as a string.
    pub arguments: String,
}

/// A trait defining the behavior of a completion engine.
///
/// This trait is used by components that handle requests for text generation
/// (or similar completions) and generate responses asynchronously. The response
/// type must support text content extraction (`ResponseContent`) and tool call
/// extraction (`ResponseToolCalls`).
///
/// # Associated Types
/// - `Response`: The specific type of the response generated by the completion engine.
pub trait Completion {
    /// The type of response returned by the `completion` method.
    type Response: Send + Sync + ResponseContent + ResponseToolCalls;

    /// Processes a `Request` and returns the generated response asynchronously.
    ///
    /// # Arguments
    /// - `request`: The request object containing the prompt and additional configuration.
    ///
    /// # Returns
    /// A future that resolves to either:
    /// - `Ok(Self::Response)`: The generated response.
    /// - `Err(CompletionError)`: An error encountered during the request processing.
    fn completion(
        &mut self,
        request: Request,
    ) -> impl std::future::Future<Output = Result<Self::Response, CompletionError>>;
}

/// An enumeration of possible errors that may occur during completion operations.
#[derive(Debug, thiserror::Error)]
pub enum CompletionError {
    /// A generic completion error.
    ///
    /// # Details
    /// - The error includes a message describing the cause of the failure.
    #[error("A normal completion error occurred: {0}")]
    Normal(String),
}
